name: Run CI

# Run this workflow every time a new commit pushed to your repository
on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

env:
  BACKEND_IMAGE_NAME: scrumteamzgw/zaakafhandelcomponent
  FRONTEND_IMAGE_NAME: scrumteamzgw/zac-ui
  time: 3
  continue: true

jobs:
  check_files_changed:
    name: Check if backend files were changed
    runs-on: ubuntu-latest
    outputs:
      run_job: ${{ steps.check_files.outputs.run_job }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: check modified files
        id: check_files
        run: |
          echo "=============== list modified files ==============="
          git diff --name-only HEAD^ HEAD

          echo "========== check paths of modified files =========="
          git diff --name-only HEAD^ HEAD > files.txt
          while IFS= read -r file
          do
            echo $file
            if [[ $file != backend/* ]]; then
              echo "run_job=false" >> "$GITHUB_OUTPUT"
            else
              echo "run_job=true" >> "$GITHUB_OUTPUT"
              break
            fi
          done < files.txt

  backend-tests:
    name: Run the Django test suite and build documentation
    needs: check_files_changed
    if: needs.check_files_changed.outputs.run_job == 'true'
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: backend

    services:
      postgres:
        image: postgres:10
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      redis:
        image: redis:5
        ports:
          - 6379:6379

      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.9.2
        env:
           discovery.type: single-node
           ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        ports:
          - 9200:9200
          - 9300:9300

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '12'

      - name: Install dependencies
        run: pip install -r requirements/dev.txt pytest

      - name: Build frontend
        run: |
          npm ci
          npm run build --production

      - name: Wait for ES to become available
        run: |
          es_status=red
          until [[ $es_status = green ]]; do
              >&2 echo "Waiting for ES to become available. Current status: $es_status"
              sleep 1
              es_status=$(curl -s -X GET http://localhost:9200/_cluster/health\?pretty\=true | jq -r .status)
          done

      - name: Run tests
        run: |
          python src/manage.py collectstatic --noinput --link
          coverage run src/manage.py test src
        env:
          DJANGO_SETTINGS_MODULE: zac.conf.ci
          SECRET_KEY: dummy
          DB_NAME: postgres
          DB_USER: postgres
          DB_PASSWORD: ''
          IS_HTTPS: 'no'
  
      - name: Build and test docs
        working-directory: backend/doc
        run: |
          pytest check_sphinx.py -v --tb=auto

  backend-docker:
    needs: backend-tests
    timeout-minutes: 10
    if: always()

    name: Build (and push) backend Docker image
    runs-on: ubuntu-latest

    steps: 
      - name: fail if conditional job failed
        if: ${{ needs.backend-tests.result == 'failure' }}
        run: exit 1

      - name: Checkout
        uses: actions/checkout@v2

      - name: Construct tag
        id: vars
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          
          # Strip "v" prefix from tag name (if present at all)
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use `latest` tag for the main branch
          [ "$VERSION" == "main" ] && VERSION=latest

          echo ::set-output name=tag::${VERSION}
          echo ::set-output name=git_hash::${GITHUB_SHA}

      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      -
        name: Image Build
        uses: docker/build-push-action@v2
        with:
          context: backend
          platforms: linux/amd64
          push: false
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: | 
            COMMIT_HASH=${{ steps.vars.outputs.git_hash }}
            RELEASE=${{ steps.vars.outputs.tag }}
          tags: |
            scrumteamzgw/zaakafhandelcomponent:${{ steps.vars.outputs.tag }}

      -
        name: Image Push
        if: github.event_name == 'push'  # exclude PRs
        run: |
          docker push scrumteamzgw/zaakafhandelcomponent:${{ steps.vars.outputs.tag }}


  frontend-docker:
    # needs: frontend-tests

    name: Build (and push) frontend Docker image
    runs-on: ubuntu-latest

    steps: 
      -
        name: Checkout
        uses: actions/checkout@v2

      -
        name: Construct tag
        id: vars
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          
          # Strip "v" prefix from tag name (if present at all)
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use `latest` tag for the main branch
          [ "$VERSION" == "main" ] && VERSION=latest

          echo ::set-output name=tag::${VERSION}

      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      -
        name: Image Build
        uses: docker/build-push-action@v2
        with:
          context: frontend/zac-ui
          platforms: linux/amd64
          push: false
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            scrumteamzgw/zac-ui:${{ steps.vars.outputs.tag }}
  
      -
        name: Image Push
        if: github.event_name == 'push'  # exclude PRs
        run: |
          docker push scrumteamzgw/zac-ui:${{ steps.vars.outputs.tag }}\
